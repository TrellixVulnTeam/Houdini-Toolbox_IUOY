#!/usr/bin/env python3.8
"""Script to lint the project."""

# =============================================================================
# IMPORTS
# =============================================================================

# Standard Library
import argparse
import glob
import json
import os
import subprocess
import sys
import tempfile
from io import StringIO
from xml.etree import ElementTree

# Third Party
from pylint import lint
from pylint.reporters.text import TextReporter


# =============================================================================
# CLASSES
# =============================================================================

class _BaseLintable:
    """Base class for a lintable thing.

    :param path: The path for the lintable object.
    :type path: str
    :param disabled_checks: Any checks to disable.
    :type disabled_checks: list(str)

    """

    def __init__(self, path, disabled_checks=None):
        self._disabled_checks = disabled_checks
        self._path = path

    def __repr__(self):
        return f"<{self.__class__.__name__} {self.path}>"

    # -------------------------------------------------------------------------
    # PROPERTIES
    # -------------------------------------------------------------------------

    @property
    def disabled_checks(self):
        """list(str): List of disabled checks"""
        return self._disabled_checks

    @property
    def path(self):
        """str: The path on disk."""
        return self._path


class ExtractedOperator(_BaseLintable):
    """Class representing an extracted digital asset.

    :param name: The name of the operator.
    :type name: str
    :param path: The path to the operator specific folder.
    :type path: str

    """

    def __init__(self, name, path):
        super().__init__(path, disabled_checks=None)

        self._name = name
        self._files_to_lint = []

        self._gather_files()

    def __repr__(self):
        return f"<ExtractedOperator {self.name} ({self.path})>"

    # -------------------------------------------------------------------------
    # NON-PUBLIC METHODS
    # -------------------------------------------------------------------------

    def _gather_files(self):
        """Gather all operator related files.

        This includes any Python sections or shelf tools.

        :return:

        """
        self._find_python_sections()

        shelf_path = os.path.join(self.path, "Tools.shelf")

        if os.path.exists(shelf_path):
            self.files_to_lint.append(LintableShelfFile(shelf_path, tool_name=self.name))

    def _find_python_sections(self):
        """Build a list of all Python related section files to lint.

        This list will include any section files with IsPython in ExtraFileOptions
        and the PythonCook section if it exists.

        :return:

        """
        # The file options file.
        extra_options = os.path.join(self.path, "ExtraFileOptions")

        if os.path.exists(extra_options):
            with open(extra_options, encoding="utf-8") as handle:
                data = json.load(handle)

            for key, values in list(data.items()):
                if "IsPython" in key:
                    value = values["value"]

                    if value:
                        script_name = key.split('/')[0]
                        section_path = os.path.join(self.path, script_name)

                        output_section_path = os.path.join(self.path, script_name)

                        self.files_to_lint.append(
                            LintableFile(section_path, output_section_path)
                        )

        # PythonCook sections are implicitly Python so check for them manually.
        python_cook_path = os.path.join(self.path, "PythonCook")

        if os.path.exists(python_cook_path):
            output_section_path = os.path.join(self.path, "PythonCook")

            self.files_to_lint.append(
                LintableFile(python_cook_path, output_section_path, ["missing-docstring"])
            )

    # -------------------------------------------------------------------------
    # PROPERTIES
    # -------------------------------------------------------------------------

    @property
    def files_to_lint(self):
        """list(str): A list of operator files to lint."""
        return self._files_to_lint

    @property
    def name(self):
        """str: The name of the operator."""
        return self._name

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the operator files.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean_code = True

        for file_to_lint in self._files_to_lint:
            clean_code &= file_to_lint.lint(runner)

        return clean_code


class ExtractedOtl:
    """Class representing an extracted otl file.

    :param directory_path: The path to the extracted otl.
    :type directory_path: str

    """

    def __init__(self, directory_path):
        self._operators = []
        self._path = directory_path

        sections_list = os.path.join(self.path, "Sections.list")

        if not os.path.exists(sections_list):
            raise RuntimeError("Could not find Sections.list in extracted otl folder")

        self._build_operator_list(sections_list)

    # -------------------------------------------------------------------------
    # NON-PUBLIC METHODS
    # -------------------------------------------------------------------------

    def _build_operator_list(self, sections_list):
        """Build a list of operators in the extracted library.

        :param sections_list: The path to the Sections.list file inside the library.
        :type sections_list: str
        :return: A list of operators inside the library.
        :rtype:

        """
        with open(sections_list, encoding="utf-8") as handle:
            data = handle.readlines()

        results = []

        for line in data:
            components = line.split()

            if components:
                if os.path.isdir(os.path.join(self.path, components[0])):
                    results.append(components)

        for definition in results:
            operator = ExtractedOperator(definition[1], os.path.join(self.path, definition[0]))

            self.operators.append(operator)

    # -------------------------------------------------------------------------
    # PROPERTIES
    # -------------------------------------------------------------------------

    @property
    def operators(self):
        """list(ExtractedOperator): list of operators inside the library """
        return self._operators

    @property
    def path(self):
        """str: The path to the operator folder."""
        return self._path


class HoudiniLintRunner:
    """Linter configuration and runner."""

    def __init__(self, houdini_items, python_bins, verbose=False):
        # Create a temp directory where we can store temporary test files.
        temp_dir = tempfile.mkdtemp()

        self._flags = []
        self._temp_dir = temp_dir
        self._houdini_items = houdini_items
        self._python_bins = python_bins
        self._verbose = verbose

    # -------------------------------------------------------------------------
    # PROPERTIES
    # -------------------------------------------------------------------------

    @property
    def flags(self):
        """list(str): Flags for pylint."""
        return self._flags

    @property
    def houdini_items(self):
        """list(str): A list of Houdini items to lint."""
        return self._houdini_items

    @property
    def python_bins(self):
        """list(str): List of possible Python interpreter names."""
        return self._python_bins

    @property
    def temp_dir(self):
        """str: The test temp directory."""
        return self._temp_dir

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def get_lint_flags(self, item, extra_flags=None, disabled_checks=None):
        """Get the lint flags."""
        if extra_flags is None:
            extra_flags = []

        all_disabled = []

        if item.disabled_checks is not None:
            all_disabled.extend(item.disabled_checks)

        if disabled_checks is not None:
            all_disabled.extend(disabled_checks)

        if all_disabled:
            disabled = [f"--disable={','.join(all_disabled)}"]

        else:
            disabled = []

        return self.flags + extra_flags + disabled

    def lint_path(self, file_path, item, disabled_checks=None):
        """Lint a file path.

        :param file_path: The path to lint.
        :type file_path: str
        :param item: The item to lint.
        :type item: _BaseLintable
        :param disabled_checks: Optional test specific checks to disable.
        :type disabled_checks: list(str)
        :return: Whether or not violations were detected.
        :rtype: bool

        """
        if disabled_checks is None:
            disabled_checks = []

        flags = self.get_lint_flags(item, disabled_checks=disabled_checks)

        # A string buffer to capture output.
        buf = StringIO()

        if self._verbose:
            if file_path == item.path or isinstance(item, LintableDirectory):
                print(f"Linting {file_path}")

            else:
                print(f"Linting {file_path} ({item.path})")

        # Run the test, capturing and filtering error output.
        lint.Run([file_path] + flags, reporter=TextReporter(buf), exit=False)

        # Print any output.
        stdout = buf.getvalue()
        sys.stdout.write(stdout)

        # If there was any output then the test failed.
        return len(stdout) == 0


class LintableDirectory(_BaseLintable):
    """Class representing a lintable directory."""

    def __repr__(self):
        return f"<{self.__class__.__name__} {self.path}>"

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the directory.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean_code = True

        for directory_name, sub_directories, file_names in os.walk(self.path):   # pylint: disable=unused-variable
            basename = os.path.basename(directory_name)

            # Skip things like hidden files/directories.
            if not basename[0].isalpha():
                continue

            # Run lint on all python files within dir.
            for filename in file_names:
                file_path = os.path.join(directory_name, filename)

                if _is_python_file(file_path, runner):
                    clean_code &= runner.lint_path(file_path, self)

        return clean_code


class LintablePythonProject(LintableDirectory):
    """Class representing a lintable Python project directory."""

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the project.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        return runner.lint_path(self.path, self)


class LintableFile(_BaseLintable):
    """Class representing a lintable file..

    :param path: The path for the lintable object.
    :type path: str
    :param display_name: Optional display name for test output.
    :type display_name: str
    :param disabled_checks: Any checks to disable.
    :type disabled_checks: list(str)

    """

    def __init__(self, path, display_name=None, disabled_checks=None):
        super().__init__(path, disabled_checks=disabled_checks)

        self._display_name = display_name

    def __repr__(self):
        if self.display_name is not None:
            path = self.display_name

        else:
            path = self.path

        return f"<{self.__class__.__name__} {path}>"

    # -------------------------------------------------------------------------
    # PROPERTIES
    # -------------------------------------------------------------------------

    @property
    def display_name(self):
        """str: Display name for test output."""
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        self._display_name = display_name

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the file.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean = runner.lint_path(self.path, self)

        if not clean:
            if self.display_name is not None:
                print(self.display_name)

            else:
                print(self.path)

        return clean


class LintableMenuFile(LintableFile):
    """A lintable xml menu file."""

    # -------------------------------------------------------------------------
    # NON-PUBLIC METHODS
    # -------------------------------------------------------------------------

    def _lint_code_section(self, text, runner, base_file_name, disabled_checks=None):
        """Lint the file.

        :param text: The section text to lint.
        :type text: str
        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :param base_file_name: The source file name.
        :type: str
        :param disabled_checks: Any checks to disable.
        :type disabled_checks: list(str)
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        file_name = f"{base_file_name}.py"

        temp_path = os.path.join(runner.temp_dir, file_name)

        with open(temp_path, "w", encoding="utf-8") as handle:
            handle.write(text)
            handle.flush()

        if disabled_checks is None:
            disabled_checks = []

        disabled_checks.extend(["missing-docstring", "undefined-variable"])

        clean = runner.lint_path(temp_path, self, disabled_checks=disabled_checks)

        if not clean:
            print(f"{self.path}: {base_file_name} ({temp_path})")

        return clean

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the file.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean_code = True

        tree = ElementTree.parse(self.path)

        for script_item in tree.iter(tag="scriptItem"):
            code = script_item.find("scriptCode")

            clean_code &= self._lint_code_section(code.text, runner, script_item.get("id"))

            context = script_item.find("context/expression")

            if context is not None:
                clean_code &= self._lint_code_section(
                    context.text,
                    runner,
                    f"{script_item.get('id')}.context",
                    disabled_checks=["return-outside-function", "missing-docstring"]
                )

        return clean_code


class LintablePythonPanelFile(LintableFile):
    """A lintable python panel file.

    :param path: The python panel path.
    :type path: str
    :param display_name: Optional display name.
    :type display_name: str

    """

    def __init__(self, path, display_name=None):
        disabled_checks = [
            "missing-final-newline",
            "invalid-name",
            "missing-docstring",
            "undefined-variable"
        ]

        super().__init__(path, display_name, disabled_checks)

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the file.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean_code = True

        tree = ElementTree.parse(self.path)

        root = tree.getroot()
        for interface in root:
            script = interface.find("script")

            if script is None:
                continue

            script_code = script.text

            interface_name = interface.get("name")

            file_name = f"{interface_name}.py"

            temp_path = os.path.join(runner.temp_dir, file_name)

            with open(temp_path, "w", encoding="utf-8") as handle:
                handle.write(script_code)
                handle.flush()

            clean = runner.lint_path(temp_path, self)

            if not clean:
                print(f"{self.path}: {interface_name} ({temp_path})")

            clean_code &= clean

        return clean_code


class LintableShelfFile(LintableFile):
    """A lintable xml shelf file.

    :param path: The shelf file path.
    :type path: str
    :param display_name: Optional display name.
    :type display_name: str

    """

    def __init__(self, path, display_name=None, tool_name=None):
        disabled_checks = [
            "missing-final-newline",
            "invalid-name",
            "missing-docstring",
            "undefined-variable"
        ]

        super().__init__(path, display_name, disabled_checks)

        self._tool_name = tool_name

    # -------------------------------------------------------------------------
    # METHODS
    # -------------------------------------------------------------------------

    def lint(self, runner):
        """Lint the file.

        :param runner: Configuration runner.
        :type runner: HoudiniLintRunner
        :return: Whether or not the tests where successful.
        :rtype: bool

        """
        clean_code = True

        tree = ElementTree.parse(self.path)

        root = tree.getroot()

        for tool in root:
            script = tool.find("script")

            if script is None:
                continue

            language = script.get("scriptType")

            if language != "python":
                continue

            script_code = script.text

            tool_name = tool.get("name")

            if tool_name == "$HDA_DEFAULT_TOOL":
                tool_name = self._tool_name.replace("::", "__").replace("/", "_") + "_DEFAULT_TOOL"

            file_name = f"{tool_name}.py"

            temp_path = os.path.join(runner.temp_dir, file_name)

            with open(temp_path, "w", encoding="utf-8") as handle:
                handle.write(script_code)
                handle.flush()

            clean = runner.lint_path(temp_path, self)

            if not clean:
                print(f"{self.path}: {tool_name} ({temp_path})")

            clean_code &= clean

        return clean_code


class OtlFile(ExtractedOtl):
    """Class representing an otl file that will be extracted for testing.

    :param file_path: The path to the library file.
    :type file_path: str
    :param temp_dir: The path to the testing temp dir.
    :type temp_dir: str

    """

    def __init__(self, file_path, temp_dir):
        self._file_path = file_path

        file_name = os.path.basename(file_path)

        target_folder = os.path.join(temp_dir, file_name)

        with subprocess.Popen(
            ["hotl", "-t", target_folder, file_path],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        ) as proc:
            proc.wait()

        super().__init__(target_folder)

        self._post_process_operators()

    # -------------------------------------------------------------------------
    # NON-PUBLIC METHODS
    # -------------------------------------------------------------------------

    def _post_process_operators(self):
        """Post process operators after creation.

        This method is used to update display names based on the source file.

        :return:

        """
        for operator in self.operators:
            for op_file in operator.files_to_lint:
                op_path = op_file.path
                base_name = os.path.basename(op_path)

                op_file.display_name = f"{self._file_path}?{operator.name}/{base_name}"


# =============================================================================
# NON-PUBLIC FUNCTIONS
# =============================================================================

def _build_parser():
    """Build an argument parser for the script args.

    :return: The constructed parser.
    :rtype: argparse.ArgumentParser

    """
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "--add-dir", action="append", dest="directories", default=[], help="Add a directory to be linted"
    )

    parser.add_argument(
        "--add-file", action="append", dest="files", default=[], help="Add a file to be linted"
    )

    parser.add_argument(
        "--houdini-items", action="store", default="otls,shelves,python_panels,python2.7libs,scripts,soho,menus",
        help="A list of Houdini items to lint"
    )

    parser.add_argument(
        "--package-name", action="store", help="Optional Python package name to lint"
    )

    parser.add_argument(
        "--python-bins", action="store", default="python,hython,mayapy",
        help="List of executables which are Python interpreters."
    )

    parser.add_argument(
        "--python-root", action="store", default="python", help="The root directory the package will be in"
    )

    parser.add_argument(
        "--rcfile", action="store", help="Specify a configuration file"
    )

    parser.add_argument(
        "--root", action="store", help="Optional root directory to look for things from.  By default uses the cwd"
    )

    parser.add_argument(
        "--verbose", action="store_true", help="Enable verbose output"
    )

    return parser


def _get_houdini_items(houdini_root, runner):
    """Get Houdini-related items to lint.

    :param houdini_root: The root houdini directory.
    :type houdini_root: str
    :param runner: Configuration runner.
    :type runner: HoudiniLintRunner
    :return: The items to lint.

    """
    items_to_lint = []

    for item in runner.houdini_items:
        if item == "otls":
            otl_path = os.path.join(houdini_root, "otls")

            if os.path.exists(otl_path):
                items_to_lint.extend(_get_otl_items(otl_path, runner.temp_dir))

            continue

        if item == "shelves":
            toolbar_path = os.path.join(houdini_root, "toolbar")

            if os.path.exists(toolbar_path):
                items_to_lint.extend(_get_tool_items(toolbar_path))

            continue

        if item == "python_panels":
            panel_path = os.path.join(houdini_root, "python_panels")

            if os.path.exists(panel_path):
                items_to_lint.extend(_get_python_panel_items(panel_path))

            continue

        if item == "menus":
            items_to_lint.extend(_get_menu_items(houdini_root))

            continue

        dir_path = os.path.join(houdini_root, item)

        if not os.path.isdir(dir_path):
            continue

        items_to_lint.append(LintableDirectory(dir_path))

    return items_to_lint


def _get_python_panel_items(toolbar_path):
    """Get a list of shelf items to lint.

    :param toolbar_path: The path to the shelf file folder.
    :type toolbar_path: str
    :return: A list of shelf tool items to lint.
    :rtype: list(LintablePythonPanelFile)

    """
    shelf_files = []

    for shelf_file in glob.glob(os.path.join(toolbar_path, "*.pypanel")):
        shelf_files.append(LintablePythonPanelFile(shelf_file))

    return shelf_files


def _get_tool_items(toolbar_path):
    """Get a list of shelf items to lint.

    :param toolbar_path: The path to the shelf file folder.
    :type toolbar_path: str
    :return: A list of shelf tool items to lint.
    :rtype: list(LintableShelfFile)

    """
    shelf_files = []

    for shelf_file in glob.glob(os.path.join(toolbar_path, "*.shelf")):
        shelf_files.append(LintableShelfFile(shelf_file))

    return shelf_files


def _get_menu_items(houdini_root):
    """Get a list of shelf items to lint.

    :param houdini_root: The path to the houdini folder.
    :type houdini_root: str
    :return: A list of menu items to lint.
    :rtype: list(LintableMenuFile)

    """
    menu_files = []

    for menu_file in glob.glob(os.path.join(houdini_root, "*.xml")):
        menu_files.append(LintableMenuFile(menu_file))

    return menu_files


def _get_otl_items(otl_path, temp_dir):
    """Get a list of shelf items to lint.

    :param otl_path: The path to the otls folder.
    :type otl_path: str
    :param temp_dir: The test temp directory.
    :type temp_dir: str
    :return: A list otl items to lint.
    :rtype: list

    """
    operators = []

    for otl_folder in os.listdir(otl_path):
        otl_folder_path = os.path.join(otl_path, otl_folder)

        if os.path.isdir(otl_folder_path):
            # clean_code &= _lint_extracted_otl(otl_folder_path, temp_dir)
            try:
                extracted_otl = ExtractedOtl(otl_folder_path)

            # We might not be able to instantiate an object for all folders due to things
            # like backup folders and whatnot.
            except RuntimeError:
                continue

            operators.extend(extracted_otl.operators)

        else:
            extension = os.path.splitext(otl_folder_path)[1]

            if extension in (".hda", ".otl"):
                otl_file = OtlFile(otl_folder_path, temp_dir)
                operators.extend(otl_file.operators)

    return operators


def _is_python_file(file_path, runner):
    """Check to see if a path is a valid Python file we can lint.

    A file is valid if:
    - It is a .py file
    - It has a #! containing certain known Python interpreter names.

    :param file_path: The path to lint.
    :type file_path: str
    :param runner: Configuration runner.
    :type runner: HoudiniLintRunner
    :return: Whether or not we think this file is a Python file.
    :rtype: bool

    """
    ext = os.path.splitext(file_path)[1]
    if ext == ".py":
        return True

    if ext == ".pyc":
        return False

    if runner.python_bins:
        with open(file_path, encoding="utf-8") as handle:
            try:
                first_line = handle.readline()

            except UnicodeDecodeError:
                return False

        if first_line.startswith("#!"):
            for python_bin in runner.python_bins:
                if python_bin in first_line:
                    return True

    return False


# =============================================================================
# FUNCTIONS
# =============================================================================

def main():  # pylint: disable=too-many-locals
    """Perform the linting.

    :return:

    """
    parser = _build_parser()

    results = parser.parse_args()

    if results.root is not None:
        root = os.path.realpath(results.root)

    else:
        root = os.getcwd()

    runner = HoudiniLintRunner(
        results.houdini_items.split(","),
        results.python_bins.split(","),
        verbose=results.verbose
    )

    if results.rcfile is not None:
        runner.flags.append(f"--rcfile={results.rcfile}")

    # The list of things which will be linted.
    items_to_lint = []

    # Lint the primary Python package code.
    if results.package_name is not None:
        args = [root]

        if results.python_root is not None:
            args.append(results.python_root)

        args.append(results.package_name)

        package_path = os.path.join(*args)
        items_to_lint.append(LintablePythonProject(package_path))

    # Lint various Houdini related Python files.
    houdini_root = os.path.join(root, "houdini")
    items_to_lint.extend(_get_houdini_items(houdini_root, runner))

    # A list of additional directories to lint. The 2nd arg is whether
    # or not to check each file in there as being a Python script (#!..python)
    for directory in results.directories:
        directory_path = os.path.join(root, directory)
        items_to_lint.append(LintableDirectory(directory_path))

    # A list of additional files to lint.
    for file_name in results.files:
        file_path = os.path.join(root, file_name)
        items_to_lint.append(LintableFile(file_path))

    # Whether or not all the items pass linting.
    clean = True

    extra_args = [None]

    for extra in extra_args:
        if extra is not None:
            runner.flags.append(extra)

        # Lint each item.
        for item in items_to_lint:
            clean &= item.lint(runner)

    if clean:
        print("No problems detected")

    else:
        print("Problems detected")
        sys.exit(1)


# =============================================================================

if __name__ == "__main__":
    main()
