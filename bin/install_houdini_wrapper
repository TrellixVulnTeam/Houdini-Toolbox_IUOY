#!/usr/bin/env python3
"""Handle creating and removing symlinks for custom Houdini wrapper."""

# =============================================================================
# IMPORTS
# =============================================================================

# Standard Library
import argparse
import os
import stat

# =============================================================================
# GLOBALS
# =============================================================================

# Default application wrappers to install.
_DEFAULT_WRAPPERS = [
    "ginfo",
    "gplay",
    "hbatch",
    "hcmake",
    "hcollapse",
    "hconfig",
    "hcustom",
    "hexpand",
    "hescape",
    "hkey",
    "hmaster",
    "hotl",
    "houdini",
    "hscript",
    "hython",
    "iconvert",
    "iinfo",
    "mantra",
    "mplay",
    "vcc",
]


# =============================================================================
# FUNCTIONS
# =============================================================================

def build_parser() -> argparse.ArgumentParser:
    """Build an argument parser to handle input.

    :return: The constructed argument parser.

    """
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--apps",
        nargs="+",
        default=_DEFAULT_WRAPPERS,
        help="An optional list of applications to install/uninstall."
    )

    parser.add_argument(
        "--directory",
        required=True,
        help="Directory to install symlinks to."
    )

    parser.add_argument(
        "--wrapper",
        required=True,
        help="Wrapper file to link to."
    )

    # Create an exclusive group since we can only either install or uninstall
    # at the same time.
    install_group = parser.add_mutually_exclusive_group()

    install_group.add_argument(
        "--install",
        action="store_true",
        default=False,
        help="Install symlinks."
    )

    install_group.add_argument(
        "--uninstall",
        action="store_true",
        default=False,
        help="Remove symlinks."
    )

    return parser


def main():
    """Main function."""
    # Build the parser and parse the args.
    parser = build_parser()
    arguments = parser.parse_args()

    wrapper = arguments.wrapper
    directory = arguments.directory

    # If neither install or uninstall was specified we can't do anything.
    if not any([arguments.install, arguments.uninstall]):
        print("Nothing to do: Please specify --install or --uninstall.")
        return

    # Verify the target directory exists.
    if not os.path.isdir(directory):
        raise os.error("Not a valid target directory")

    # Handle pointing to a wrapper relative to this install script.
    wrapper = os.path.realpath(wrapper)

    # Verify the wrapper exists.
    if not os.path.isfile(wrapper):
        raise os.error("Not a valid wrapper file")

    # Process each application to handle.
    for application in arguments.apps:
        # Build the link path.
        link_path = os.path.join(directory, application)

        # Create the link.
        if arguments.install:
            print(f"Creating {link_path} -> {wrapper}")

            os.symlink(wrapper, link_path)

            # Set links to be executable.
            stats = os.stat(link_path)
            os.chmod(link_path, stats.st_mode | stat.S_IEXEC)

        # Try to remove the link.
        elif arguments.uninstall:
            # If the link isn't pointing to the specified wrapper we can't
            # remove it.
            if os.path.realpath(link_path) != wrapper:
                print(f"Warning: Cannot remove {link_path}.  Not linked to {wrapper}")

                continue

            print(f"Removing {link_path} -> {wrapper}")

            # Remove the link.
            os.unlink(link_path)


# =============================================================================

if __name__ == "__main__":
    main()
