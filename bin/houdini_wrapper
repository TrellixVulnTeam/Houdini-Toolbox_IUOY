#!/usr/bin/env python3
"""Launch Houdini related applications."""

# =============================================================================
# IMPORTS
# =============================================================================

from __future__ import annotations

# Standard Library
import argparse
import os
import signal
import subprocess
import sys
from typing import TYPE_CHECKING, List, Tuple

# Third Party
from termcolor import colored, cprint

# Houdini Toolbox
import houdini_toolbox.machinery.package
import houdini_toolbox.machinery.sidefx_web_api

if TYPE_CHECKING:
    import types


# =============================================================================
# GLOBALS
# =============================================================================

# Signals we want to handle.
_SIGNALS = (
    signal.SIGHUP,
    signal.SIGINT,
    signal.SIGQUIT,
    signal.SIGTERM,
)

# Construct a HoudiniBuildManager to handle all our available Houdini options.
_BUILD_MANAGER = houdini_toolbox.machinery.package.HoudiniBuildManager()


# =============================================================================
# NON-PUBLIC FUNCTIONS
# =============================================================================

def _build_parsers() -> Tuple[argparse.ArgumentParser, argparse.ArgumentParser]:
    """Build ArgumentParsers for the wrapper.

    :return: The wrapper argument parsers.

    """
    # Don't allow abbreviations since we don't want them to interfere with any
    # flags that might need to be passed through.
    parser = argparse.ArgumentParser(
        description="Run Houdini related applications.  Supports 'download', 'install' & 'uninstall' subcommands.",
        allow_abbrev=False
    )

    parser.add_argument(
        "--dump-env",
        action="store_true",
        help="Display environment variables and values.",
        dest="dump_env"
    )

    parser.add_argument(
        "--no-jemalloc",
        action="store_true",
        help="Launch Houdini in debugging mode without jemalloc.",
        dest="no_jemalloc"
    )

    parser.add_argument(
        "--test-path",
        action="store_true",
        default=False,
        help="Don't include any non-standard environment settings.",
        dest="test_path"
    )

    parser.add_argument(
        "--version",
        nargs="?",
        default="default",
        help="Set the package version."
    )

    parser.add_argument(
        "--default-version",
        action="store_true",
        dest="display_default",
        help="Display the default version."
    )

    parser.add_argument(
        "--no-symlink",
        action="store_true",
        default=False,
        help="Don't create a major.minor symlink when installing",
        dest="no_symlink"
    )

    extra_parser = argparse.ArgumentParser()
    subparsers = extra_parser.add_subparsers()

    # Download sub parser
    download = subparsers.add_parser("download", help="Download things")
    download.set_defaults(func=_download_handler)

    download.add_argument("--list", action="store_true", help="List available download options", dest="list_builds")
    download.add_argument(
        "--production", action="store_true", help="Only consider production builds", dest="only_production"
    )
    download.add_argument("--no-install", action="store_true", help="Download but don't install", dest="no_install")
    download.add_argument("--remove", action="store_true", help="Remove archive after install", dest="remove")
    download.add_argument("version", nargs="?", help="The version to download")
    download.add_argument("--product", nargs="?", default="houdini", help="The version to download")

    # Install sub parser
    install = subparsers.add_parser("install", help="Install things")
    install.set_defaults(func=_install_handler)
    install.add_argument("--list", action="store_true", help="List builds available for install", dest="list_builds")
    install.add_argument("version", nargs="?", help="The version to be installed")

    # Uninstall sub parser
    uninstall = subparsers.add_parser("uninstall", help="Uninstall things")
    uninstall.set_defaults(func=_uninstall_handler)
    uninstall.add_argument("--list", action="store_true", help="List builds available to uninstall", dest="list_builds")
    uninstall.add_argument("versions", nargs="*", help="The versions to be uninstalled")

    return parser, extra_parser


def _display_versions():
    """Display a list of Houdini versions that are available to install,
    run or uninstall.

    :return:

    """
    print("Installed Houdini builds:")

    default_build = _BUILD_MANAGER.get_default_build()

    output = []

    for build in _BUILD_MANAGER.installed:
        if build == default_build:
            # Run the message through the style function.
            msg = colored(build.display_name, "cyan")

            output.append(msg)

        else:
            output.append(build.display_name)

    print('\t' + ' '.join(output))

    print()


def _download_handler(args: argparse.Namespace):
    """Handle operations for the download subcommand.

    :param args: The download args.
    :return:

    """
    product = args.product

    if args.list_builds:
        print("Houdini builds available to download:\n")

        houdini_toolbox.machinery.sidefx_web_api.list_builds(
            version=args.version,
            product=product,
            only_production=args.only_production
        )

        return

    if not args.version:
        print("No version specified")

        return

    downloaded_archives = _BUILD_MANAGER.download_builds([args.version], product=product)

    if not args.no_install:
        for archive in downloaded_archives:
            package = houdini_toolbox.machinery.package.HoudiniInstallFile(archive)
            package.install(not args.no_symlink)


def _find_build(args: argparse.Namespace):
    """Search for the selected build.  If no valid build was selected print a message.

    :param args: The wrapper args.
    :return:

    """
    version = args.version

    search_builds = _BUILD_MANAGER.installed

    # Couldn't find any builds, so print the appropriate message.
    if not search_builds:
        print("No available builds found.")

        return None

    build = None

    # Use the last build in the list since it is sorted by version.
    if version == "latest":
        build = search_builds[-1]

    # Support a 'default' build as defined in the config file.
    elif version == "default":
        build = _BUILD_MANAGER.get_default_build()

    # Look for a build matching the string.
    else:
        result = houdini_toolbox.machinery.package.find_matching_builds(version, search_builds)

        if result is None:
            print(f"Could not find version: {version}")

        else:
            build = result

    return build


def _install_handler(args: argparse.Namespace):
    """Handle operations for the install subcommand.

    :param args: The download args.
    :return:

    """
    # List builds that can be installed.
    if args.list_builds:
        _print_local_build_list(_BUILD_MANAGER.installable, "Houdini builds to install:")

        return

    if not args.version:
        print("No version specified")

        return

    result = houdini_toolbox.machinery.package.find_matching_builds(args.version, _BUILD_MANAGER.installable)

    if result is None:
        print(f"Could not find installable build {args.version}")

    else:
        result.install(not args.no_symlink)


def _print_local_build_list(build_list: List[houdini_toolbox.machinery.package.HoudiniBuildType], message: str):
    """Print a list of local builds.

    :param build_list: A list of builds on disk.
    :param message: The title message.
    :return:

    """
    print(message)

    print('\t' + " ".join([build.display_name for build in build_list]))

    print()


def _signal_handler(caught_signal: int, current_frame: types.FrameType):  # pylint: disable=unused-argument
    """Signal handler to catch incoming signals and kill the process group.

    This allows things like the Render Scheduler to kill Mantra renders.

    :param caught_signal: The number of the received signal.
    :param current_frame: The current stack frame.
    :return:

    """
    print(f"Houdini wrapper caught sig {signal.Signals(caught_signal).name}")

    # Ignore further signals.
    for sig in _SIGNALS:
        signal.signal(sig, signal.SIG_DFL)

    # Get the current process group id.
    gid = os.getpgid(0)

    # Kill all the processes in the group.
    os.killpg(gid, 15)

    # Exit with non-default status.
    sys.exit(1)


def _set_no_jemalloc(build_path: str, program_name: str) -> List[str]:
    """Set the environment in order to run without jemalloc.

    :param build_path: The path to the install location.
    :param program_name: The name of the running program.
    :return: A list of command args to run without jemalloc.

    """
    ld_path = os.path.join(os.environ["HDSO"], "empty_jemalloc")

    # See if the LD_LIBRARY_PATH is already set since we need to modify it.
    current_ld_path = os.getenv("LD_LIBRARY_PATH")

    # If the path exists we insert our custom part before the existing
    # values.
    if current_ld_path is not None:
        ld_path = ":".join([ld_path, current_ld_path])

    # Set the variable to contain our path.
    os.environ["LD_LIBRARY_PATH"] = ld_path

    # Disable warning about no jemalloc.
    os.environ["HOUDINI_DISABLE_JEMALLOCTEST"] = "1"

    # Build the new list of main run arguments and return them.
    run_args = [
        "/lib64/ld-linux-x86-64.so.2",
        "--inhibit-rpath",
        "''",
        f"{build_path}/bin/{program_name}-bin"
    ]

    return run_args


def _uninstall_handler(args: argparse.Namespace):
    """Handle operations for the uninstall subcommand.

    :param args: The download args.
    :return:

    """
    # List builds that can be installed.
    if args.list_builds:
        _print_local_build_list(_BUILD_MANAGER.installed, "Houdini builds to uninstall:")

        return

    if not args.versions:
        print("No version specified")

        return

    for version in args.versions:
        result = houdini_toolbox.machinery.package.find_matching_builds(version, _BUILD_MANAGER.installed)

        if result is None:
            print(f"Could not find version: {version}")

            continue

        result.uninstall()


# =============================================================================
# FUNCTIONS
# =============================================================================

def main():
    """Execute the wrapper.

    :return:

    """
    # Handle specified signals.
    for sig in _SIGNALS:
        signal.signal(sig, _signal_handler)

    parser, subcommand_parser = _build_parsers()

    # Parse the arguments.
    args, extras = parser.parse_known_args()

    # Check if any of the subcommand args are in the extra args.
    if set(extras).intersection(["download", "install", "uninstall"]):
        args = subcommand_parser.parse_args(extras, namespace=args)

        # Call the extra parser function.
        args.func(args)

        return

    # If asking to display the default version then just print it and bail.
    if args.display_default:
        print(_BUILD_MANAGER.get_default_build())

        return

    # Get the name of the executable we are trying to run.
    program_name = os.path.basename(sys.argv[0])

    no_jemalloc = args.no_jemalloc
    test_path = args.test_path

    # If version is False (no argument), display any available versions and
    # exit.
    if not args.version:
        _display_versions()

        return

    # Try to find a build.
    build = _find_build(args)

    # No build found, so abort.
    if build is None:
        return

    # Set the base environment for the build.
    build.setup_environment(test_path=test_path)

    # Handle setting options when the 'hcmake' compile command is used.
    if program_name == "hcmake":
        program_name = "cmake"

        # Set the plugin installation directory to the plugin path if
        # the build has one.
        if build.plugin_path is not None:
            os.environ["HOUDINI_TOOLBOX_PLUGIN_BUILD_DIR"] = build.plugin_path

    # Dumping all the environment and Houdini settings.
    if args.dump_env:
        # To display the Houdini configuration, change the program to run
        # hconfig -a.
        program_name = "hconfig"
        extras = ["-a"]

        # Dump the environment with 'printenv'.
        with subprocess.Popen("printenv", stdout=subprocess.PIPE) as proc:
            print(proc.communicate()[0])
            print()

    # Start with the name of the program to run.
    run_args = [program_name]

    # If we don't want to have Houdini use jemalloc we need to replace the
    # run args. For more information, see
    # http://www.sidefx.com/docs/houdini/ref/panes/perfmon
    if no_jemalloc:
        run_args = _set_no_jemalloc(build.path, program_name)

    # Run the application.
    with subprocess.Popen(run_args + extras) as proc:
        # Wait for the program to complete.
        proc.wait()

        # Get the return code.
        return_code = proc.returncode

    # If the program didn't end clean, print a message.
    if return_code != 0:
        cprint(f"{program_name} exited with signal {abs(return_code)}.", "red")

    # Exit with the program's return code.
    sys.exit(return_code)


# =============================================================================

if __name__ == "__main__":
    main()
