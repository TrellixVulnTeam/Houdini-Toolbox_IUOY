#icon: opdef:.?icon.svg

= C++ Wrangle =

"""Write C++ functions that can be called directly from Python."""

This operator allows you to write compiled C++ [HDK|http://www.sidefx.com/docs/hdk/] code that can be called from Python in a SOP node.

:note:
    This operator makes use of Houdini's [inlinecpp|/hom/extendingwithcpp] module; your machine must be able to compile HDK code using hcustom.

:tip:
    Utilize the *Pause Compiling* button if you are going to be entering a lot of code to prevent waiting for the code to constantly compile.

== Helper python functions ==

The *houdini_toolbox.inline.utils* module contains functions that can be used to deal with converting data for use with inlinecpp.

=== Convert to C data functions ===

In many cases it can be useful to pass lists of values (floats, ints, strings) to your C++ functions.  To easily handle this there are convenience functions available to convert those data types to ctypes compatible objects.

:box:
    {{{
    #!python
    # eg. integer list ([0, 1, 2, 3, 4])

    """
    // Define a C++ function that accepts an array of ints
    void func(int *vals, int num_vals)
    {
        std::vector<int> vect {vals, vals + num_vals};

        ...
    }
    """

    # Construct an object we can pass
    >>> arr = utils.build_c_int_array([0, 1, 2, 3, 4])
    >>> arr
    <c_int_Array_5 object at 0x7f4613505560>
    >>> lib.func(arr, len(arr))
    }}}

=== HDK attribute/group conversion functions ===

These functions will convert Houdini attribute and group types into integers that can be cast to HDK data types.

:box:
    {{{
    #!python
    # eg. point attribute (hou.Attrib.type() == hou.attribType.Point)

    """
    // Define a C++ function that accepts an attribute type as an integer

    void func(GU_Detail *gdp, int attribute_type)
    {
        GA_AttributeOwner owner = static_cast<GA_AttributeOwner>(attribute_type)
        // owner -> GA_ATTRIB_POINT
        ...
    }
    """

    # Convert to compatible object we can pass
    >>> attrib = geo.findPointAttrib("P")
    >>> attribute_type = utils.get_attrib_owner(attrib)
    >>> attribute_type
    1
    >>> lib.func(geo, attribute_type)
    }}}


=== Return value processing functions ===

These functions are simple convenience functions that convert lists of values to hou objects such as points, prims or nodes from paths.

:box:
    {{{
    #!python
    # eg. Getting a tuple of hou.Point back

    """
    // Define a function which returns an integer array representing point numbers.
    IntArray connectedPoints(const GU_Detail *gdp, int pt_num)
    {
        std::vector<int>        pt_nums;
        ...
        return pt_nums;
    }
    """

    >>> result = lib.func(geo)
    >>> result
    [1, 10]
    >>> utils.get_points_from_list(geometry, result)
    (<hou.Point #1 of geometry in /obj/geo1/grid1>, <hou.Point #10 of geometry in /obj/geo1/grid1>)
    }}}


@parameters
    Recompile:
        #id: recompile

        Recompile C++ code if necessary.

    Pause Compiling:
        #id: pause_compiling

        Don't automatically recompile C++ code when values have changed.


    == Python ==

    Code:
        #id: code

        Python code to modify input geometry.

    == C++ Definitions ==


    Number of functions:
        #id: num_functions

        The number of C++ function parameters to create.

    C++ Code:
        Define C++ functions.


    == Includes & Structs ==

    === Includes ===

    Common includes are commonly used, similar headers that can be easily added for convenience.

    Base:
        #id: base_includes

        Base includes (GU/GU_Detail.h, OP/OP_Node.h)

    Geo:
        #id: geo_includes

        Geometry includes (GA/GA_AttributeRefMap.h, GEO/GEO_Face.h, GEO/GEO_PointTree.h, GQ/GQ_Detail.h, GU/GU_PackedGeometry.h, GU/GU_PrimPacked.h)

    Nodes:
        #id: node_includes

        Node includes (OP/OP_Director.h, PRM/PRM_Parm.h)

    Number of headers:
        #id: num_includes

        The number of headers to include.

    Header file:
        Include specific header files, ie. SOP/SOP_Node.h

    Include Code:
        #id: include_code

        Code that will be included after #include statements but before the primary function definitions.  Use this field to define any shared functions you might want to use.

        Note:
            By default there is a ```void validateStringVector(std::vector<std::string> &)``` function defined which can be useful for when your function returns a StringArray.
            It is currently not possible to return an empty vector so calling this function with your vector before returning it will ensure there is at least 1 item (an empty
            string) in it.

    === Structs ===

    Common structs:
        #id: common_structs

        Include common structs such as IntArray, FloatArray, Position3D, etc

    Number of structs:
        #id: num_structs

        The number of structs to create.

    Struct:
        Define custom structs that can be returned by functions, ie. Position3D - (("x", "d"), ("y", "d"), ("z", "d"))


    == Options ==

    View .C file:
        #id: view_c_file
        View the .C file created by inlinecpp.

    === General ===

    Library Name:
        #id: library_name

        The inlinecpp library file name to compile to.  This defaults to the node name so *C++ Wrangle* instances can have unique code but can be changed to a common name to be shared amongst identical node instances.

    Compile Target:
        #id: compile_target

        Choose where to compile the code to.

        inlinecpp default:
            Compile to the inlinecpp default folder ($HOME/houdiniX.Y/inlinecpp)

        $TEMP:
            Compile to $TEMP.

        custom:
            Compile to a user defined folder.

    Custom Target Folder:
        #id: custom_compile_target

        A custom compilation target folder.  If this folder does not exist an error will occur.

    Print Compile Errors:
        #id: print_compiler_errors

        Print any compilation errors.

    === Inlinecpp options ===

    Miscellaneous options for inlinecpp compilation

    Acquire HOM Lock:
        #id: acquire_hom_lock

        If set, the code will be automatically modified to use a HOM_AutoLock, to ensure threadsafe access to the C++ object when the Python code is being run in a separate thread.  If your code modifies Houdini's internal state, set this parameter to True.

    Catch Crashes:
        #id: catch_crashes

        If set, Houdini will attempt to catch crashes in your C++ code and convert them into Python RuntimeError exceptions containing a C++ stack trace.  There is no guarantee that Houdini can always recover from crashes in your C++ code, so Houdini may still crash even if this parameter is set to True.  Setting this parameter to None (the default) will make it use the same setting as the debug parameter.

    Debug:
        #id: debug

        If set, the code will be compiled with debug information.  If True and you do not specify a value for catch_crashes, Houdini will also attempt to convert crashes in your C++ code into Python RuntimeError exceptions.

    Include Directories:
        #id: num_include_dirs

        A sequence of extra directory paths to be used to search for include files. These paths are passed as -I options to the hcustom command when compiling the C++ code.

    Link Directories:
        #id: num_link_dirs

        A sequence of extra directory paths to be used to search for shared or static libraries that the C++ code links against. These paths are passed as -L options to the hcustom command.

    Link Libs:
        #id: num_link_libs

        A sequence of names of extra libraries that the C++ code needs to link against. These library names are passed as -l options to the hcustom command.

@related

- [Node:sop/attribwrangle]
- [Node:sop/python]
